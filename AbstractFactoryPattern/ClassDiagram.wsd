@startuml Abstarct Factory Pattern

abstract class AbstractFactory {
  Shape getShape()
  Color getColor()
}

FactoryProducer -> AbstractFactory  : make
class FactoryProducer {
  AbstractFactory getFactory()
}

AbstractFactoryPatternDemo -> FactoryProducer : ask
class AbstractFactoryPatternDemo {
  void main()
}

AbstractFactory <-- ShapeFactory : extends
class ShapeFactory {
  Shape getShape()
}

ShapeFactory --> shape : create

package shape <<rectangle>> {
  interface Shape {
    void draw()
  }

  Shape <-- Circle : implement

  class Circle {
    void draw()
  }

  Shape <-- Rectangle : implement
  class Rectangle {
    void draw()
  }

  Shape <-- Square : implement
  class Square {
    void draw()
  }
}


AbstractFactory <-- ColorFactory : extends
class ColorFactory {
  Color getColor()
}

ColorFactory --> color : create

package color <<rectangle>> {
  interface Color {
    void fill()
  }

  Color <-- Blue : implement
  class Blue {
    void fill()
  }

  Color <-- Green : implement
  class Green {
    void fill()
  }

  Color <-- Red : implement
  class Red {
    void fill()
  }
}

@enduml